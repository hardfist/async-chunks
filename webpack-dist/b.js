(()=>{"use strict";var e={417:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o,nested:()=>r});const o=42,r=()=>n.e(28).then(n.bind(n,28))},28:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o=43}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.e=()=>Promise.resolve(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=fs;var t=n.n(e),o="/index.js";it("should include all async imports in the main chunk",(async()=>{expect((await Promise.resolve().then(n.bind(n,417))).default).toEqual(42),expect((await(await Promise.resolve().then(n.bind(n,417))).nested()).default).toEqual(43),expect(t().readFileSync(o,"utf-8")).toContain("This is the async chunk"),expect(t().readFileSync(o,"utf-8")).toContain("This is the nested async chunk")}))})()})();